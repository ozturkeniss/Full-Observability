syntax = "proto3";

package user.v1;

option go_package = "github.com/tair/full-observability/api/proto/user;userpb";

import "google/protobuf/timestamp.proto";

// UserService provides user management operations
service UserService {
  // Authentication
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // User operations
  rpc GetUser(GetUserRequest) returns (UserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Admin operations
  rpc ChangeRole(ChangeRoleRequest) returns (UserResponse);
  rpc ToggleActive(ToggleActiveRequest) returns (UserResponse);
  rpc GetStats(GetStatsRequest) returns (StatsResponse);
}

// User message
message User {
  uint32 id = 1;
  string username = 2;
  string email = 3;
  string full_name = 4;
  string role = 5;
  bool is_active = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// Register request/response
message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string full_name = 4;
}

message RegisterResponse {
  User user = 1;
}

// Login request/response
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  User user = 2;
}

// Get user request/response
message GetUserRequest {
  uint32 id = 1;
}

message UserResponse {
  User user = 1;
}

// Update user request
message UpdateUserRequest {
  uint32 id = 1;
  string email = 2;
  string full_name = 3;
  string password = 4;
}

// Delete user request/response
message DeleteUserRequest {
  uint32 id = 1;
}

message DeleteUserResponse {
  string message = 1;
}

// List users request/response
message ListUsersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string role = 3;
}

message ListUsersResponse {
  repeated User users = 1;
  int32 total = 2;
}

// Change role request
message ChangeRoleRequest {
  uint32 user_id = 1;
  string role = 2;
}

// Toggle active request
message ToggleActiveRequest {
  uint32 user_id = 1;
  bool is_active = 2;
}

// Get stats request/response
message GetStatsRequest {}

message StatsResponse {
  int64 total_users = 1;
  int64 admin_count = 2;
  int64 user_count = 3;
  int64 active_users = 4;
}

