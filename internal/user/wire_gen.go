// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"github.com/tair/full-observability/internal/user/delivery/grpc"
	"github.com/tair/full-observability/internal/user/delivery/http"
	"github.com/tair/full-observability/internal/user/repository"
	"github.com/tair/full-observability/internal/user/usecase/command"
	"github.com/tair/full-observability/internal/user/usecase/query"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeHTTPHandler(db *gorm.DB) (*http.UserHandler, error) {
	userRepository := ProvideUserRepository(db)
	registerUserHandler := ProvideRegisterUserHandler(userRepository)
	loginUserHandler := ProvideLoginUserHandler(userRepository)
	updateUserHandler := ProvideUpdateUserHandler(userRepository)
	deleteUserHandler := ProvideDeleteUserHandler(userRepository)
	changeRoleHandler := ProvideChangeRoleHandler(userRepository)
	toggleActiveHandler := ProvideToggleActiveHandler(userRepository)
	getUserHandler := ProvideGetUserHandler(userRepository)
	listUsersHandler := ProvideListUsersHandler(userRepository)
	getStatsHandler := ProvideGetStatsHandler(userRepository)
	userHandler := http.NewUserHandlerWithDI(
		registerUserHandler,
		loginUserHandler,
		updateUserHandler,
		deleteUserHandler,
		changeRoleHandler,
		toggleActiveHandler,
		getUserHandler,
		listUsersHandler,
		getStatsHandler,
		userRepository,
	)
	return userHandler, nil
}

func InitializeGRPCServer(db *gorm.DB) (*grpc.UserServer, error) {
	userRepository := ProvideUserRepository(db)
	registerUserHandler := ProvideRegisterUserHandler(userRepository)
	loginUserHandler := ProvideLoginUserHandler(userRepository)
	updateUserHandler := ProvideUpdateUserHandler(userRepository)
	deleteUserHandler := ProvideDeleteUserHandler(userRepository)
	changeRoleHandler := ProvideChangeRoleHandler(userRepository)
	toggleActiveHandler := ProvideToggleActiveHandler(userRepository)
	getUserHandler := ProvideGetUserHandler(userRepository)
	listUsersHandler := ProvideListUsersHandler(userRepository)
	getStatsHandler := ProvideGetStatsHandler(userRepository)
	userServer := grpc.NewUserServerWithDI(
		registerUserHandler,
		loginUserHandler,
		updateUserHandler,
		deleteUserHandler,
		changeRoleHandler,
		toggleActiveHandler,
		getUserHandler,
		listUsersHandler,
		getStatsHandler,
	)
	return userServer, nil
}

// wire.go:

func ProvideUserRepository(db *gorm.DB) repository.GormUserRepository {
	return *repository.NewGormUserRepository(db)
}

func ProvideRegisterUserHandler(repo repository.GormUserRepository) *command.RegisterUserHandler {
	return command.NewRegisterUserHandler(&repo)
}

func ProvideLoginUserHandler(repo repository.GormUserRepository) *command.LoginUserHandler {
	return command.NewLoginUserHandler(&repo)
}

func ProvideUpdateUserHandler(repo repository.GormUserRepository) *command.UpdateUserHandler {
	return command.NewUpdateUserHandler(&repo)
}

func ProvideDeleteUserHandler(repo repository.GormUserRepository) *command.DeleteUserHandler {
	return command.NewDeleteUserHandler(&repo)
}

func ProvideChangeRoleHandler(repo repository.GormUserRepository) *command.ChangeRoleHandler {
	return command.NewChangeRoleHandler(&repo)
}

func ProvideToggleActiveHandler(repo repository.GormUserRepository) *command.ToggleActiveHandler {
	return command.NewToggleActiveHandler(&repo)
}

func ProvideGetUserHandler(repo repository.GormUserRepository) *query.GetUserHandler {
	return query.NewGetUserHandler(&repo)
}

func ProvideListUsersHandler(repo repository.GormUserRepository) *query.ListUsersHandler {
	return query.NewListUsersHandler(&repo)
}

func ProvideGetStatsHandler(repo repository.GormUserRepository) *query.GetStatsHandler {
	return query.NewGetStatsHandler(&repo)
}

