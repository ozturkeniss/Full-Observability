// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"github.com/tair/full-observability/internal/user/delivery/grpc"
	"github.com/tair/full-observability/internal/user/delivery/http"
	"github.com/tair/full-observability/internal/user/domain"
	"github.com/tair/full-observability/internal/user/repository"
	"github.com/tair/full-observability/internal/user/usecase/command"
	"github.com/tair/full-observability/internal/user/usecase/query"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeHTTPHandler initializes HTTP handler with all dependencies
func InitializeHTTPHandler(db *gorm.DB) (*http.UserHandler, error) {
	userRepository := ProvideUserRepository(db)
	registerUserHandler := ProvideRegisterUserHandler(userRepository)
	loginUserHandler := ProvideLoginUserHandler(userRepository)
	updateUserHandler := ProvideUpdateUserHandler(userRepository)
	deleteUserHandler := ProvideDeleteUserHandler(userRepository)
	changeRoleHandler := ProvideChangeRoleHandler(userRepository)
	toggleActiveHandler := ProvideToggleActiveHandler(userRepository)
	getUserHandler := ProvideGetUserHandler(userRepository)
	listUsersHandler := ProvideListUsersHandler(userRepository)
	getStatsHandler := ProvideGetStatsHandler(userRepository)
	userHandler := http.NewUserHandlerWithDI(
		registerUserHandler,
		loginUserHandler,
		updateUserHandler,
		deleteUserHandler,
		changeRoleHandler,
		toggleActiveHandler,
		getUserHandler,
		listUsersHandler,
		getStatsHandler,
		userRepository,
	)
	return userHandler, nil
}

// InitializeGRPCServer initializes gRPC server with all dependencies
func InitializeGRPCServer(db *gorm.DB) (*grpc.UserServer, error) {
	userRepository := ProvideUserRepository(db)
	registerUserHandler := ProvideRegisterUserHandler(userRepository)
	loginUserHandler := ProvideLoginUserHandler(userRepository)
	updateUserHandler := ProvideUpdateUserHandler(userRepository)
	deleteUserHandler := ProvideDeleteUserHandler(userRepository)
	changeRoleHandler := ProvideChangeRoleHandler(userRepository)
	toggleActiveHandler := ProvideToggleActiveHandler(userRepository)
	getUserHandler := ProvideGetUserHandler(userRepository)
	listUsersHandler := ProvideListUsersHandler(userRepository)
	getStatsHandler := ProvideGetStatsHandler(userRepository)
	userServer := grpc.NewUserServerWithDI(
		registerUserHandler,
		loginUserHandler,
		updateUserHandler,
		deleteUserHandler,
		changeRoleHandler,
		toggleActiveHandler,
		getUserHandler,
		listUsersHandler,
		getStatsHandler,
	)
	return userServer, nil
}

// wire.go:

// ProvideUserRepository provides the user repository
func ProvideUserRepository(db *gorm.DB) domain.UserRepository {
	return repository.NewGormUserRepository(db)
}

// ProvideRegisterUserHandler provides register user handler
func ProvideRegisterUserHandler(repo domain.UserRepository) *command.RegisterUserHandler {
	return command.NewRegisterUserHandler(repo)
}

// ProvideLoginUserHandler provides login user handler
func ProvideLoginUserHandler(repo domain.UserRepository) *command.LoginUserHandler {
	return command.NewLoginUserHandler(repo)
}

// ProvideUpdateUserHandler provides update user handler
func ProvideUpdateUserHandler(repo domain.UserRepository) *command.UpdateUserHandler {
	return command.NewUpdateUserHandler(repo)
}

// ProvideDeleteUserHandler provides delete user handler
func ProvideDeleteUserHandler(repo domain.UserRepository) *command.DeleteUserHandler {
	return command.NewDeleteUserHandler(repo)
}

// ProvideChangeRoleHandler provides change role handler
func ProvideChangeRoleHandler(repo domain.UserRepository) *command.ChangeRoleHandler {
	return command.NewChangeRoleHandler(repo)
}

// ProvideToggleActiveHandler provides toggle active handler
func ProvideToggleActiveHandler(repo domain.UserRepository) *command.ToggleActiveHandler {
	return command.NewToggleActiveHandler(repo)
}

// ProvideGetUserHandler provides get user handler
func ProvideGetUserHandler(repo domain.UserRepository) *query.GetUserHandler {
	return query.NewGetUserHandler(repo)
}

// ProvideListUsersHandler provides list users handler
func ProvideListUsersHandler(repo domain.UserRepository) *query.ListUsersHandler {
	return query.NewListUsersHandler(repo)
}

// ProvideGetStatsHandler provides get stats handler
func ProvideGetStatsHandler(repo domain.UserRepository) *query.GetStatsHandler {
	return query.NewGetStatsHandler(repo)
}

