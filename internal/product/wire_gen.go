// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package product

import (
	"github.com/tair/full-observability/internal/product/delivery/http"
	"github.com/tair/full-observability/internal/product/domain"
	"github.com/tair/full-observability/internal/product/repository"
	"github.com/tair/full-observability/internal/product/usecase/command"
	"github.com/tair/full-observability/internal/product/usecase/query"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeHTTPHandler initializes HTTP handler with all dependencies
func InitializeHTTPHandler(db *gorm.DB) (*http.ProductHandler, error) {
	productRepository := ProvideProductRepository(db)
	createProductHandler := ProvideCreateProductHandler(productRepository)
	updateProductHandler := ProvideUpdateProductHandler(productRepository)
	deleteProductHandler := ProvideDeleteProductHandler(productRepository)
	updateStockHandler := ProvideUpdateStockHandler(productRepository)
	getProductHandler := ProvideGetProductHandler(productRepository)
	listProductsHandler := ProvideListProductsHandler(productRepository)
	getStatsHandler := ProvideGetStatsHandler(productRepository)
	productHandler := http.NewProductHandlerWithDI(
		createProductHandler,
		updateProductHandler,
		deleteProductHandler,
		updateStockHandler,
		getProductHandler,
		listProductsHandler,
		getStatsHandler,
		productRepository,
	)
	return productHandler, nil
}

// wire.go:

// ProvideProductRepository provides the product repository
func ProvideProductRepository(db *gorm.DB) domain.ProductRepository {
	return repository.NewGormProductRepository(db)
}

// ProvideCreateProductHandler provides create product handler
func ProvideCreateProductHandler(repo domain.ProductRepository) *command.CreateProductHandler {
	return command.NewCreateProductHandler(repo)
}

// ProvideUpdateProductHandler provides update product handler
func ProvideUpdateProductHandler(repo domain.ProductRepository) *command.UpdateProductHandler {
	return command.NewUpdateProductHandler(repo)
}

// ProvideDeleteProductHandler provides delete product handler
func ProvideDeleteProductHandler(repo domain.ProductRepository) *command.DeleteProductHandler {
	return command.NewDeleteProductHandler(repo)
}

// ProvideUpdateStockHandler provides update stock handler
func ProvideUpdateStockHandler(repo domain.ProductRepository) *command.UpdateStockHandler {
	return command.NewUpdateStockHandler(repo)
}

// ProvideGetProductHandler provides get product handler
func ProvideGetProductHandler(repo domain.ProductRepository) *query.GetProductHandler {
	return query.NewGetProductHandler(repo)
}

// ProvideListProductsHandler provides list products handler
func ProvideListProductsHandler(repo domain.ProductRepository) *query.ListProductsHandler {
	return query.NewListProductsHandler(repo)
}

// ProvideGetStatsHandler provides get stats handler
func ProvideGetStatsHandler(repo domain.ProductRepository) *query.GetStatsHandler {
	return query.NewGetStatsHandler(repo)
}

