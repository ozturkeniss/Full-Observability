version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: .
      dockerfile: dockerfiles/user.Dockerfile
    container_name: user-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: userdb
      DB_SSLMODE: disable
      HTTP_PORT: 8080
      GRPC_PORT: 9090
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_SERVICE_NAME: user-service
      ENVIRONMENT: production
      LOG_LEVEL: info
    ports:
      - "8080:8080"  # HTTP
      - "9090:9090"  # gRPC
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - observability-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: dockerfiles/product.Dockerfile
    container_name: product-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: productdb
      DB_SSLMODE: disable
      HTTP_PORT: 8081
      GRPC_PORT: 9091
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_SERVICE_NAME: product-service
      ENVIRONMENT: production
      LOG_LEVEL: info
    ports:
      - "8081:8081"  # HTTP
      - "9091:9091"  # gRPC
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - observability-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: dockerfiles/inventory.Dockerfile
    container_name: inventory-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: inventorydb
      DB_SSLMODE: disable
      HTTP_PORT: 8082
      USER_SERVICE_GRPC_ADDR: user-service:9090
      OTEL_SERVICE_NAME: inventory-service
      ENVIRONMENT: production
      LOG_LEVEL: info
    ports:
      - "8082:8082"  # HTTP
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - observability-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    networks:
      - observability-network
    restart: unless-stopped

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"  # accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"  # accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"  # accept jaeger.thrift over binary thrift protocol
      - "5778:5778"      # serve configs
      - "16686:16686"    # serve frontend
      - "14250:14250"    # accept model.proto
      - "14268:14268"    # accept jaeger.thrift directly from clients
      - "14269:14269"    # admin port: health check at / and metrics at /metrics
      - "4317:4317"      # OTLP gRPC receiver
      - "4318:4318"      # OTLP HTTP receiver
      - "9411:9411"      # Zipkin compatible endpoint
    networks:
      - observability-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - jaeger
    networks:
      - observability-network
    restart: unless-stopped

networks:
  observability-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

