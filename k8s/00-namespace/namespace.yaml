# ==============================================================================
# NAMESPACE: observability
# ==============================================================================
# Purpose: Isolate all microservices and observability stack resources
# - Provides logical separation from other applications
# - Enables resource quotas and network policies
# - Simplifies RBAC and access control
# ==============================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: observability
  labels:
    name: observability
    environment: production
    managed-by: kubectl
    app: full-observability-stack
  annotations:
    description: "Full Observability Microservices - Production Environment"
    contact: "support@example.com"
    created-by: "DevOps Team"

---
# ==============================================================================
# RESOURCE QUOTA
# ==============================================================================
# Purpose: Limit total resource consumption in the namespace
# - Prevents resource exhaustion
# - Ensures fair resource distribution
# - Controls costs in cloud environments
# ==============================================================================

apiVersion: v1
kind: ResourceQuota
metadata:
  name: observability-quota
  namespace: observability
  labels:
    app: resource-quota
spec:
  hard:
    # Compute Resources
    requests.cpu: "10"              # Total CPU requests: 10 cores
    requests.memory: 16Gi           # Total Memory requests: 16GB
    limits.cpu: "20"                # Total CPU limits: 20 cores
    limits.memory: 32Gi             # Total Memory limits: 32GB
    
    # Storage Resources
    requests.storage: 100Gi         # Total PVC storage: 100GB
    persistentvolumeclaims: "10"    # Max number of PVCs: 10
    
    # Object Counts
    pods: "100"                     # Max pods: 100
    services: "50"                  # Max services: 50
    configmaps: "30"                # Max configmaps: 30
    secrets: "30"                   # Max secrets: 30
    
    # LoadBalancer Services
    services.loadbalancers: "3"     # Max LoadBalancer services: 3

---
# ==============================================================================
# LIMIT RANGE
# ==============================================================================
# Purpose: Set default limits and constraints for individual pods/containers
# - Prevents single pod from consuming too many resources
# - Sets defaults when not specified in pod spec
# - Ensures minimum resource allocation
# ==============================================================================

apiVersion: v1
kind: LimitRange
metadata:
  name: observability-limitrange
  namespace: observability
  labels:
    app: limit-range
spec:
  limits:
    # Container Level Limits
    - type: Container
      max:
        cpu: "2"                    # Max CPU per container: 2 cores
        memory: 4Gi                 # Max Memory per container: 4GB
      min:
        cpu: 100m                   # Min CPU per container: 100 millicores
        memory: 64Mi                # Min Memory per container: 64MB
      default:
        cpu: 500m                   # Default CPU limit: 500m
        memory: 512Mi               # Default Memory limit: 512MB
      defaultRequest:
        cpu: 200m                   # Default CPU request: 200m
        memory: 256Mi               # Default Memory request: 256MB
      maxLimitRequestRatio:
        cpu: "4"                    # Limit can be max 4x of request
        memory: "4"                 # Limit can be max 4x of request
    
    # Pod Level Limits
    - type: Pod
      max:
        cpu: "4"                    # Max CPU per pod: 4 cores
        memory: 8Gi                 # Max Memory per pod: 8GB
      min:
        cpu: 100m                   # Min CPU per pod: 100m
        memory: 64Mi                # Min Memory per pod: 64MB
    
    # Persistent Volume Claim Limits
    - type: PersistentVolumeClaim
      max:
        storage: 50Gi               # Max storage per PVC: 50GB
      min:
        storage: 1Gi                # Min storage per PVC: 1GB

---
# ==============================================================================
# NETWORK POLICY - Default Deny All
# ==============================================================================
# Purpose: Security first approach - deny all traffic by default
# - Explicit allow policies will be added for each service
# - Implements zero-trust networking model
# - This is a baseline, specific policies will override this
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: observability
  labels:
    app: network-policy
    policy-type: deny-all
spec:
  podSelector: {}  # Applies to all pods in namespace
  policyTypes:
    - Ingress
    - Egress
  # No ingress or egress rules = deny all traffic
  # Individual services will have their own NetworkPolicies to allow specific traffic

---
# ==============================================================================
# NETWORK POLICY - Allow DNS
# ==============================================================================
# Purpose: Allow all pods to perform DNS queries
# - Required for service discovery
# - Queries go to kube-dns/CoreDNS in kube-system namespace
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: observability
  labels:
    app: network-policy
    policy-type: allow-dns
spec:
  podSelector: {}  # Applies to all pods
  policyTypes:
    - Egress
  egress:
    # Allow DNS queries to kube-system
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

