# ==============================================================================
# DATABASE INITIALIZATION SCRIPTS
# ==============================================================================
# Purpose: ConfigMap containing SQL scripts to initialize databases
# - Creates separate databases for each microservice
# - Sets up initial schemas
# - Can be mounted in PostgreSQL init container
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: observability
  labels:
    app: postgres
    component: initialization
data:
  # ===========================================================================
  # 01-create-databases.sql
  # ===========================================================================
  # Purpose: Create all databases for microservices
  # ===========================================================================
  01-create-databases.sql: |
    -- Full Observability Microservices - Database Initialization
    -- This script creates separate databases for each microservice
    
    -- User Service Database
    SELECT 'CREATE DATABASE userdb'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'userdb')\gexec
    
    -- Product Service Database
    SELECT 'CREATE DATABASE productdb'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'productdb')\gexec
    
    -- Inventory Service Database
    SELECT 'CREATE DATABASE inventorydb'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'inventorydb')\gexec
    
    -- Payment Service Database
    SELECT 'CREATE DATABASE paymentdb'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'paymentdb')\gexec
    
    -- Grant all privileges to postgres user
    GRANT ALL PRIVILEGES ON DATABASE userdb TO postgres;
    GRANT ALL PRIVILEGES ON DATABASE productdb TO postgres;
    GRANT ALL PRIVILEGES ON DATABASE inventorydb TO postgres;
    GRANT ALL PRIVILEGES ON DATABASE paymentdb TO postgres;

  # ===========================================================================
  # 02-create-users.sql
  # ===========================================================================
  # Purpose: Create database users (optional - for better security)
  # ===========================================================================
  02-create-users.sql: |
    -- Create dedicated users for each service (optional)
    -- In this setup, we use the same postgres user for simplicity
    -- For production, create separate users with limited privileges
    
    -- User Service User
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'userservice') THEN
        CREATE USER userservice WITH PASSWORD 'userservice_password';
      END IF;
    END
    $$;
    
    -- Product Service User
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'productservice') THEN
        CREATE USER productservice WITH PASSWORD 'productservice_password';
      END IF;
    END
    $$;
    
    -- Inventory Service User
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'inventoryservice') THEN
        CREATE USER inventoryservice WITH PASSWORD 'inventoryservice_password';
      END IF;
    END
    $$;
    
    -- Payment Service User
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'paymentservice') THEN
        CREATE USER paymentservice WITH PASSWORD 'paymentservice_password';
      END IF;
    END
    $$;
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE userdb TO userservice;
    GRANT ALL PRIVILEGES ON DATABASE productdb TO productservice;
    GRANT ALL PRIVILEGES ON DATABASE inventorydb TO inventoryservice;
    GRANT ALL PRIVILEGES ON DATABASE paymentdb TO paymentservice;

  # ===========================================================================
  # 03-extensions.sql
  # ===========================================================================
  # Purpose: Install PostgreSQL extensions
  # ===========================================================================
  03-extensions.sql: |
    -- Enable UUID extension for all databases
    \c userdb;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    \c productdb;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    \c inventorydb;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    \c paymentdb;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

  # ===========================================================================
  # 04-seed-data.sql (Optional)
  # ===========================================================================
  # Purpose: Insert initial seed data
  # ===========================================================================
  04-seed-data.sql: |
    -- Seed data will be inserted by the application's migration system
    -- This script is a placeholder for any manual seed data
    
    -- Example: Create default admin user (handled by application)
    -- \c userdb;
    -- INSERT INTO users (username, email, password, role) 
    -- VALUES ('admin', 'admin@example.com', 'hashed_password', 'admin')
    -- ON CONFLICT DO NOTHING;

---
# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================
# Purpose: General application configuration for all microservices
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: observability
  labels:
    app: configuration
    component: general
data:
  # Environment
  ENVIRONMENT: "production"
  
  # Logging
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # Service Discovery
  USER_SERVICE_HTTP_ADDR: "user-service:8080"
  USER_SERVICE_GRPC_ADDR: "user-service:9090"
  PRODUCT_SERVICE_HTTP_ADDR: "product-service:8081"
  PRODUCT_SERVICE_GRPC_ADDR: "product-service:9091"
  INVENTORY_SERVICE_HTTP_ADDR: "inventory-service:8082"
  INVENTORY_SERVICE_GRPC_ADDR: "inventory-service:9092"
  PAYMENT_SERVICE_HTTP_ADDR: "payment-service:8083"
  
  # API Gateway
  GATEWAY_PORT: "8000"
  CORS_ALLOWED_ORIGINS: "*"
  
  # Database Configuration
  DB_MAX_OPEN_CONNS: "25"
  DB_MAX_IDLE_CONNS: "5"
  DB_CONN_MAX_LIFETIME: "5m"
  
  # Redis Configuration
  REDIS_MAX_RETRIES: "3"
  REDIS_POOL_SIZE: "10"
  
  # Kafka Configuration
  KAFKA_CONSUMER_GROUP_INVENTORY: "inventory-service-group"
  KAFKA_AUTO_OFFSET_RESET: "earliest"
  KAFKA_ENABLE_AUTO_COMMIT: "true"
  
  # OpenTelemetry / Jaeger
  OTEL_SERVICE_NAME: "microservice"
  OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
  JAEGER_SAMPLER_TYPE: "const"
  JAEGER_SAMPLER_PARAM: "1"
  
  # Prometheus
  PROMETHEUS_URL: "http://prometheus:9090"
  
  # Rate Limiting
  RATE_LIMIT_REQUESTS_PER_SECOND: "100"
  RATE_LIMIT_BURST: "200"
  
  # Circuit Breaker
  CIRCUIT_BREAKER_TIMEOUT: "30s"
  CIRCUIT_BREAKER_MAX_REQUESTS: "3"
  CIRCUIT_BREAKER_INTERVAL: "60s"
  
  # Timeouts
  HTTP_CLIENT_TIMEOUT: "30s"
  GRPC_CLIENT_TIMEOUT: "30s"
  DATABASE_QUERY_TIMEOUT: "10s"

---
# ==============================================================================
# PROMETHEUS CONFIGURATION
# ==============================================================================
# Purpose: Prometheus scraping configuration
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'full-observability'
        environment: 'production'
    
    # Alert Manager Configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # - alertmanager:9093
    
    # Rules Configuration
    rule_files:
      - '/etc/prometheus/rules/*.yml'
    
    # Scrape Configurations
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # User Service
      - job_name: 'user-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['user-service:8080']
            labels:
              service: 'user-service'
              team: 'backend'
      
      # Product Service
      - job_name: 'product-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['product-service:8081']
            labels:
              service: 'product-service'
              team: 'backend'
      
      # Inventory Service
      - job_name: 'inventory-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['inventory-service:8082']
            labels:
              service: 'inventory-service'
              team: 'backend'
      
      # Payment Service
      - job_name: 'payment-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['payment-service:8083']
            labels:
              service: 'payment-service'
              team: 'backend'
      
      # API Gateway
      - job_name: 'api-gateway'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['api-gateway:8000']
            labels:
              service: 'api-gateway'
              team: 'infrastructure'
      
      # PostgreSQL Exporter (optional)
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-exporter:9187']
            labels:
              service: 'postgres'
              team: 'database'
      
      # Redis Exporter (optional)
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
            labels:
              service: 'redis'
              team: 'cache'
      
      # Kafka Exporter (optional)
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-exporter:9308']
            labels:
              service: 'kafka'
              team: 'messaging'
      
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
      
      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

---
# ==============================================================================
# GRAFANA DATASOURCES
# ==============================================================================
# Purpose: Auto-configure Grafana datasources
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
  labels:
    app: grafana
    component: datasources
data:
  datasources.yaml: |
    apiVersion: 1
    
    datasources:
      # Prometheus Datasource
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "60s"
          httpMethod: "POST"
      
      # Jaeger Datasource
      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger:16686
        editable: true
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'
            tags: ['trace_id']

