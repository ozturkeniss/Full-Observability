{{- if .Values.grafana.enabled }}
{{- if .Values.grafana.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  {{- if .Values.global.storageClass }}
  storageClassName: {{ .Values.global.storageClass }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.grafana.persistence.size }}
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: {{ .Values.global.imageRegistry }}/{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.grafana.service.port }}
              name: grafana
          envFrom:
            - secretRef:
                name: grafana-secret
          env:
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          {{- if .Values.grafana.persistence.enabled }}
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
          {{- end }}
          resources:
            {{- toYaml .Values.grafana.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.grafana.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.grafana.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
      {{- if .Values.grafana.persistence.enabled }}
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app: grafana
spec:
  type: {{ .Values.grafana.service.type }}
  ports:
    - port: {{ .Values.grafana.service.port }}
      targetPort: {{ .Values.grafana.service.port }}
      {{- if eq .Values.grafana.service.type "NodePort" }}
      nodePort: {{ .Values.grafana.service.nodePort }}
      {{- end }}
      protocol: TCP
      name: grafana
  selector:
    app: grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Values.global.namespace }}
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger:16686
{{- end }}

