{{- if .Values.networkPolicies.enabled }}
# ==============================================================================
# NETWORK POLICY - ALLOW DNS
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: {{ .Values.global.namespace }}
  labels:
    app: network-policy
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

---
# ==============================================================================
# NETWORK POLICY - ALLOW INGRESS TO API GATEWAY
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-api-gateway
  namespace: {{ .Values.global.namespace }}
  labels:
    app: api-gateway
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
    - Ingress
  ingress:
    # Allow from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000
    # Allow from within namespace (for health checks)
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 8000

---
# ==============================================================================
# NETWORK POLICY - ALLOW INGRESS TO GRAFANA
# ==============================================================================
{{- if .Values.grafana.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app: grafana
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 3000
{{- end }}

---
# ==============================================================================
# NETWORK POLICY - ALLOW INGRESS TO JAEGER
# ==============================================================================
{{- if .Values.jaeger.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-jaeger
  namespace: {{ .Values.global.namespace }}
  labels:
    app: jaeger
spec:
  podSelector:
    matchLabels:
      app: jaeger
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 16686
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 16686
{{- end }}

---
# ==============================================================================
# NETWORK POLICY - MICROSERVICES TO DATABASE
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-microservices-to-postgres
  namespace: {{ .Values.global.namespace }}
  labels:
    app: postgres
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: microservice
      ports:
        - protocol: TCP
          port: 5432

---
# ==============================================================================
# NETWORK POLICY - MICROSERVICES TO REDIS
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-to-redis
  namespace: {{ .Values.global.namespace }}
  labels:
    app: redis
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: gateway
      ports:
        - protocol: TCP
          port: 6379

---
# ==============================================================================
# NETWORK POLICY - MICROSERVICES TO KAFKA
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-to-kafka
  namespace: {{ .Values.global.namespace }}
  labels:
    app: kafka
spec:
  podSelector:
    matchLabels:
      app: kafka
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: microservice
      ports:
        - protocol: TCP
          port: 29092

---
# ==============================================================================
# NETWORK POLICY - ALLOW API GATEWAY TO MICROSERVICES
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-gateway-to-microservices
  namespace: {{ .Values.global.namespace }}
  labels:
    app: microservices
spec:
  podSelector:
    matchLabels:
      component: microservice
  policyTypes:
    - Ingress
  ingress:
    # Allow from API Gateway
    - from:
        - podSelector:
            matchLabels:
              component: gateway
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
        - protocol: TCP
          port: 8082
        - protocol: TCP
          port: 8083
    # Allow gRPC between microservices
    - from:
        - podSelector:
            matchLabels:
              component: microservice
      ports:
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 9091
        - protocol: TCP
          port: 9092

---
# ==============================================================================
# NETWORK POLICY - ALLOW PROMETHEUS TO SCRAPE METRICS
# ==============================================================================
{{- if .Values.prometheus.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scraping
  namespace: {{ .Values.global.namespace }}
  labels:
    app: prometheus
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
        - protocol: TCP
          port: 8082
        - protocol: TCP
          port: 8083
        - protocol: TCP
          port: 8000
{{- end }}

---
# ==============================================================================
# NETWORK POLICY - ALLOW ALL EGRESS (for external APIs, registries, etc.)
# ==============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
  namespace: {{ .Values.global.namespace }}
  labels:
    app: network-policy
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - {}

{{- end }}

