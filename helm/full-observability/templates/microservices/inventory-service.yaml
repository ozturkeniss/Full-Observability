{{- if .Values.inventoryService.enabled }}
# ==============================================================================
# INVENTORY SERVICE - DEPLOYMENT
# ==============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.inventoryService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.inventoryService.name }}
    component: microservice
    tier: backend
spec:
  replicas: {{ .Values.inventoryService.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ .Values.inventoryService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.inventoryService.name }}
        component: microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.inventoryService.service.httpPort }}"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Values.inventoryService.name }}
                topologyKey: kubernetes.io/hostname
      
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done;']
        - name: wait-for-kafka
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z kafka 29092; do echo waiting for kafka; sleep 2; done;']
        - name: wait-for-user-service
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z user-service 9090; do echo waiting for user-service; sleep 2; done;']
      
      containers:
        - name: {{ .Values.inventoryService.name }}
          image: {{ .Values.global.imageRegistry }}/{{ .Values.inventoryService.image.repository }}:{{ .Values.inventoryService.image.tag }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.inventoryService.service.httpPort }}
            - name: grpc
              containerPort: {{ .Values.inventoryService.service.grpcPort }}
          env:
            - name: HTTP_PORT
              value: "{{ .Values.inventoryService.service.httpPort }}"
            - name: GRPC_PORT
              value: "{{ .Values.inventoryService.service.grpcPort }}"
            - name: DB_NAME
              value: "inventorydb"
            - name: OTEL_SERVICE_NAME
              value: "inventory-service"
          envFrom:
            - secretRef:
                name: postgres-secret
            - secretRef:
                name: kafka-secret
            - configMapRef:
                name: app-config
          resources:
            {{- toYaml .Values.inventoryService.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
            failureThreshold: 30
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 15"]
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inventoryService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.inventoryService.name }}
spec:
  type: {{ .Values.inventoryService.service.type }}
  ports:
    - name: http
      port: {{ .Values.inventoryService.service.httpPort }}
      targetPort: http
    - name: grpc
      port: {{ .Values.inventoryService.service.grpcPort }}
      targetPort: grpc
  selector:
    app: {{ .Values.inventoryService.name }}

---
{{- if .Values.inventoryService.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Values.inventoryService.name }}-hpa
  namespace: {{ .Values.global.namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.inventoryService.name }}
  minReplicas: {{ .Values.inventoryService.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.inventoryService.autoscaling.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.inventoryService.autoscaling.targetCPUUtilizationPercentage }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 15
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
{{- end }}

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.inventoryService.name }}-pdb
  namespace: {{ .Values.global.namespace }}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: {{ .Values.inventoryService.name }}

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ .Values.inventoryService.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.inventoryService.name }}
  endpoints:
    - port: http
      interval: 15s
      path: /metrics
{{- end }}
